const {
  EmbedBuilder,
  ButtonBuilder,
  ActionRowBuilder,
  ButtonStyle,
  PermissionsBitField
} = require('discord.js');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

module.exports = {
  name: "pay",
  description: "Generate a payment invoice with QR",
  async execute(client, message, args) {
    const staffRoleId = process.env.STAFF_ROLE_ID;
    const logChannelId = process.env.PAYMENT_LOG_CHANNEL;
    const upiId = process.env.UPI_ID || "steamified@upi";
    const qrImage = process.env.QR_IMAGE || "https://i.imgur.com/your_qr_image.png";

    // Validate arguments
    if (!args.length || args.length < 2) {
      return message.reply("‚ùå Usage: `!pay <amount> @buyer`");
    }

    const amount = parseFloat(args[0]);
    if (isNaN(amount) || amount <= 0 || amount > 999999) {
      return message.reply("‚ùå Please enter a valid amount (1 - 999999).");
    }

    const buyer = message.mentions.users.first();
    if (!buyer) {
      return message.reply("‚ùå Please mention the buyer.");
    }

    const invoiceId = uuidv4().slice(0, 8).toUpperCase();

    const embed = new EmbedBuilder()
      .setTitle("üßæ Payment Invoice")
      .setColor("Green")
      .setThumbnail(qrImage)
      .setImage(qrImage)
      .setDescription(
        `**Invoice ID:** \`${invoiceId}\`\n` +
        `**Amount:** ‚Çπ${amount}\n` +
        `**UPI ID:** \`${upiId}\`\n` +
        `**Buyer:** ${buyer}\n\n` +
        `üì• Please scan the QR and click **Confirm Payment** once completed.`
      )
      .setFooter({ text: "Expires in 10 minutes ‚Ä¢ Payment Bot" })
      .setTimestamp();

    const confirmBtn = new ButtonBuilder()
      .setCustomId(`confirm_${invoiceId}`)
      .setLabel("‚úÖ Confirm Payment")
      .setStyle(ButtonStyle.Success);

    const row = new ActionRowBuilder().addComponents(confirmBtn);

    let invoiceMsg;
    try {
      invoiceMsg = await message.channel.send({
        content: `üßæ Invoice generated by ${message.author}`,
        embeds: [embed],
        components: [row]
      });
    } catch (err) {
      console.error("‚ùå Failed to send invoice message:", err);
      return message.reply("‚ùå Failed to create invoice. Please try again.");
    }

    // Try deleting original command if permissions allow
    try {
      if (message.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
        await message.delete().catch(() => {});
      }
    } catch (err) {
      console.warn("‚ö† Unable to check/delete original command message.");
    }

    // Log invoice creation
    try {
      const logChannel = await client.channels.fetch(logChannelId);
      if (!logChannel || !logChannel.isTextBased()) {
        console.warn("‚ö† Log channel is not text-based or could not be found.");
      } else {
        await logChannel.send({
          content: `üì• New invoice by ${message.author}`,
          embeds: [embed]
        });
        console.log("‚úÖ Invoice logged successfully.");
      }
    } catch (e) {
      console.warn("‚ö† Failed to log invoice creation:", e);
    }

    // Button Collector
    const collector = invoiceMsg.createMessageComponentCollector({
      time: 10 * 60 * 1000
    });

    collector.on("collect", async interaction => {
      if (!interaction.member.roles.cache.has(staffRoleId)) {
        return interaction.reply({
          content: "üö´ Only staff members can confirm payments.",
          ephemeral: true
        });
      }

      if (interaction.customId === `confirm_${invoiceId}`) {
        await interaction.deferUpdate();

        const confirmEmbed = new EmbedBuilder()
          .setTitle("‚úÖ Payment Confirmed")
          .setColor("Blue")
          .setDescription(
            `**Invoice ID:** \`${invoiceId}\`\n` +
            `**Buyer:** ${buyer}\n` +
            `**Amount:** ‚Çπ${amount}\n` +
            `**Confirmed By:** ${interaction.user}`
          )
          .setTimestamp();

        try {
          await invoiceMsg.delete();
        } catch (_) {
          console.warn("‚ö† Invoice message already deleted.");
        }

        await interaction.channel.send({
          content: `‚úÖ ${buyer}, your payment has been confirmed.`,
          embeds: [confirmEmbed]
        });

        try {
          await buyer.send({ embeds: [confirmEmbed] });
        } catch {
          console.warn("‚ö† Could not DM the buyer.");
        }

        try {
          const logChannel = await client.channels.fetch(logChannelId);
          if (logChannel && logChannel.isTextBased()) {
            await logChannel.send({
              content: `üì§ Invoice \`${invoiceId}\` confirmed by ${interaction.user}`,
              embeds: [confirmEmbed]
            });
          }
        } catch (_) {}

        collector.stop("confirmed");
      }
    });

    // Handle expiry
    collector.on("end", async (_, reason) => {
      if (reason !== "confirmed") {
        try {
          const fetchedMsg = await message.channel.messages.fetch(invoiceMsg.id);
          await fetchedMsg.edit({
            content: "‚ùå This invoice has expired.",
            embeds: [
              embed.setColor("Red").setFooter({ text: "Invoice expired." })
            ],
            components: []
          });
        } catch (e) {
          console.warn("‚ö† Invoice expired but message not found or can't edit.");
        }
      }
    });
  }
};
